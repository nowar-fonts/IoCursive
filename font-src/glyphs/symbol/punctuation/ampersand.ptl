### Punctuation symbols
$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'

glyph-module

glyph-block Symbol-Punctuation-Ampersand : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Latin-Ezh : RevEzhShape
	glyph-block-import Letter-Shared-Shapes : DToothlessRise

	define sw : AdviceStroke2 2.5 3 CAP
	define fineAmp : AdviceStroke 3.5
	define pxUpperLoopRight : 0.75 + 0.5 * Stroke / (RightSB - SB)
	define pxUpperLoopLeft  0.05
	define pXTerminal 1.1
	define pStraightBar 0.4

	define smaUpperLoop : SmoothAOf (Smooth * (pxUpperLoopRight - pxUpperLoopLeft)) Width
	define smbUpperLoop : SmoothBOf (Smooth * (pxUpperLoopRight - pxUpperLoopLeft)) Width

	define xTerminal : [mix SB RightSB pXTerminal] - sw * HVContrast
	define xUpperLoopLeft : mix SB RightSB pxUpperLoopLeft
	define yUpperLoopLeft : CAP - smaUpperLoop
	define xUpperLoopRight : mix SB RightSB pxUpperLoopRight
	define yUpperLoopRight : CAP - smbUpperLoop
	define xUpperLoopTop : mix xUpperLoopLeft xUpperLoopRight 0.5
	define yMockUpperLoopLeftBottom : CAP - smaUpperLoop - smbUpperLoop * 0.3

	define xClosedAmpersandBottom : [mix SB RightSB 0.44] + (CorrectionOMidX + 0.125) * sw
	define [ClosedAmpersandLead] : begin
		define x1 : mix SB RightSB 0.80
		define x2 : [mix SB RightSB pXTerminal] + sw * HVContrast * 0.1
		define y1   0
		define y2 : CAP * 0.375 + sw / 2
		define k1   0.5
		return : intersection [MaskBelow y2] : dispiro
			flat [mix x1 x2 4]  [mix y1 y2 4]  [widths.rhs : AdviceStroke 3]
			curl [mix x1 x2 k1] [mix y1 y2 k1]
			g4.left.mid xClosedAmpersandBottom O [widths.rhs sw]

	create-glyph 'ampersand.closed' : union
		ClosedAmpersandLead sw
		difference
			dispiro
				g4.left.mid xClosedAmpersandBottom O [widths.rhs sw]
				archv
				g4   (SB + O) SmoothB
				alsoThru 0.5 0.5 [widths.center sw]
				g4   xUpperLoopRight yUpperLoopRight [widths.lhs sw]
				arcvh
				g4   (xUpperLoopTop - CorrectionOMidX * sw) (CAP - O)
				archv
				g4   xUpperLoopLeft yUpperLoopLeft
				flat [mix xUpperLoopLeft xTerminal pStraightBar] [mix yMockUpperLoopLeftBottom 0 pStraightBar]
				curl [mix xUpperLoopLeft xTerminal 2] (-yMockUpperLoopLeftBottom)
			Rect 0 (-CAP * 2) xTerminal (Width * 2)

	create-glyph 'ampersand.upperOpen' : union
		ClosedAmpersandLead sw
		difference
			dispiro
				g4.left.mid xClosedAmpersandBottom O [widths.rhs sw]
				archv
				g4   (SB + O) SmoothB
				alsoThru 0.5 0.5 [widths.center sw]
				g4   xUpperLoopRight yUpperLoopRight [widths.lhs sw]
			Rect (CAP * 2) yUpperLoopRight 0 Width
			Rect (CAP * 2) CapMiddle Middle Width
			intersection
				Rect (CAP * 2) SmoothA 0 (RightSB - fineAmp * HVContrast)
				WithTransform [Translate (-O) 0] : spiro-outline
					g4.left.start   (xUpperLoopTop - CorrectionOMidX * sw) (CAP - O)
					archv
					g4   xUpperLoopLeft yUpperLoopLeft
					flat [mix xUpperLoopLeft xTerminal pStraightBar] [mix yMockUpperLoopLeftBottom 0 pStraightBar]
					corner [mix xUpperLoopLeft xTerminal 2] (- yMockUpperLoopLeftBottom)
					corner ([mix xUpperLoopLeft xTerminal 2] + Width * 2) (- yMockUpperLoopLeftBottom)
					corner ([mix xUpperLoopLeft xTerminal 2] + Width * 2) (CAP - O)
		difference
			dispiro
				g4.up.start xUpperLoopRight yUpperLoopRight [widths.heading sw 0 Upward]
				arcvh
				g4   (xUpperLoopTop - CorrectionOMidX * sw) (CAP - O)
				archv
				g4  xUpperLoopLeft yUpperLoopLeft
				flat [mix xUpperLoopLeft xTerminal pStraightBar] [mix yMockUpperLoopLeftBottom 0 pStraightBar]
				curl [mix xUpperLoopLeft xTerminal 2] (- yMockUpperLoopLeftBottom)
			Rect 0 (-CAP * 2) xTerminal (Width * 2)

	define xLowerOpenRight : mix xUpperLoopRight RightSB 0.5
	define xLowerOpenBottom : mix SB xLowerOpenRight 0.5
	define yLowerOpenEnd : Math.max (SmoothA + fineAmp) (CAP * 0.45)
	define xLowerOpenBarRight : mix xLowerOpenRight Width 0.5
	define xLowerOpenBarLeft : Math.min
		xLowerOpenRight - HVContrast * Stroke - xLowerOpenBarRight + xLowerOpenRight
		mix Middle xLowerOpenRight 0.5
	define [LowerOpenCrossbar y] : dispiro
		widths.rhs fineAmp
		corner (xLowerOpenBarLeft  + TanSlope * fineAmp / 2) y
		corner (xLowerOpenBarRight + TanSlope * fineAmp / 2) y
	create-glyph 'ampersand.lowerOpen' : union
		LowerOpenCrossbar yLowerOpenEnd
		dispiro
			widths.rhs sw
			flat (xLowerOpenRight - O) yLowerOpenEnd [heading Downward]
			curl (xLowerOpenRight - O) SmoothA
			arcvh
			g4   (xLowerOpenBottom + CorrectionOMidX * sw) O
			archv
			g4   (SB + O) SmoothB
			alsoThru 0.5 0.5 [widths.center sw]
			g4   xUpperLoopRight yUpperLoopRight [widths.lhs sw]
			arcvh
			g4.left.mid   (xUpperLoopTop - CorrectionOMidX * sw) (CAP - O)

		difference
			dispiro
				g4.left.mid   (xUpperLoopTop - CorrectionOMidX * sw) (CAP - O) [widths.lhs sw]
				archv
				g4   xUpperLoopLeft yUpperLoopLeft
				flat [mix xUpperLoopLeft xTerminal pStraightBar] [mix yMockUpperLoopLeftBottom 0 pStraightBar]
				curl xTerminal 0
			spiro-outline
				g4.left.start (xLowerOpenBottom + CorrectionOMidX * sw) O
				archv
				g4   (SB + O) SmoothB
				alsoThru 0.5 0.5 [widths.center sw]
				g4   xUpperLoopRight yUpperLoopRight
				arcvh
				corner.left.end (xUpperLoopTop - CorrectionOMidX * sw) (CAP - O)
				corner (xUpperLoopTop - CorrectionOMidX * sw) (CAP * 2)
				corner (Width * 2) (CAP * 2)
				corner (Width * 2) O

	define yEtMiddle : CAP * OverlayPos
	define smaEt : CAP - [mix (yEtMiddle + sw / 2) (CAP - O - sw) (SmoothB / (SmoothA + SmoothB))] - TanSlope * HVContrast * sw
	define smbEt : [mix (sw + O) (yEtMiddle - sw / 2) (SmoothB / (SmoothA + SmoothB))] + TanSlope * HVContrast * sw
	define fineEt : sw * CThin
	define xEtLeft SB
	define xEtRight : mix xUpperLoopRight RightSB 0.5
	define xEtBottom : mix xEtLeft xEtRight 0.5
	define xEtCenterBarRight : mix xEtRight Width 0.5
	define yEtRightBarTop : mix (yEtMiddle + sw / 2) (CAP - SHook) 0.375

	create-glyph 'ampersand.etToothlessCorner' : union
		dispiro
			g4 (xEtRight + O) (CAP - SHook) [widths.lhs]
			hookstart (CAP - O)
			g4 xEtLeft (CAP - smaEt)
			arcvh
			flat Middle (yEtMiddle - (fineEt - sw / 2)) [widths.heading fineEt 0 Rightward]
			curl xEtCenterBarRight (yEtMiddle - (fineEt - sw / 2)) [heading Rightward]
		dispiro
			flat xEtCenterBarRight (yEtMiddle + (fineEt - sw / 2)) [widths.heading fineEt 0 Leftward]
			curl Middle (yEtMiddle + (fineEt - sw / 2)) [heading Leftward]
			archv
			g4 (xEtLeft + O * 2) smbEt [widths.lhs]
			arcvh
			g4   (xEtBottom + CorrectionOMidS) O
			g4   xEtRight DToothlessRise
		VBarRight xEtRight DToothlessRise yEtRightBarTop

	create-glyph 'ampersand.etToothlessRounded' : union
		dispiro
			g4 (xEtRight + O) (CAP - SHook) [widths.lhs]
			hookstart (CAP - O)
			g4 xEtLeft (CAP - smaEt)
			arcvh
			flat Middle (yEtMiddle - (fineEt - sw / 2)) [widths.heading fineEt 0 Rightward]
			curl xEtCenterBarRight (yEtMiddle - (fineEt - sw / 2)) [heading Rightward]
		dispiro
			flat xEtCenterBarRight (yEtMiddle + (fineEt - sw / 2)) [widths.heading fineEt 0 Leftward]
			curl Middle (yEtMiddle + (fineEt - sw / 2)) [heading Leftward]
			archv
			g4 (xEtLeft + O * 2) smbEt [widths.lhs]
			arcvh
			g4   (xEtBottom + CorrectionOMidS) O
			archv
			flat xEtRight smaEt
			curl xEtRight yEtRightBarTop [heading Upward]

	local sbEtToothed : shoulderMidSlope ShoulderFine nothing (-1)
	create-glyph 'ampersand.etToothed' : union
		dispiro
			g4 (xEtRight + O) (CAP - SHook) [widths.lhs]
			hookstart (CAP - O)
			g4 xEtLeft (CAP - smaEt)
			arcvh
			flat Middle (yEtMiddle - (fineEt - sw / 2)) [widths.heading fineEt 0 Rightward]
			curl xEtCenterBarRight (yEtMiddle - (fineEt - sw / 2)) [heading Rightward]

		dispiro
			flat xEtCenterBarRight (yEtMiddle + (fineEt - sw / 2)) [widths.heading fineEt 0 Leftward]
			curl Middle (yEtMiddle + (fineEt - sw / 2)) [heading Leftward]
			archv
			g4 (xEtLeft + O * 2) smbEt [widths.lhs]
			arcvh
			g4.right.mid (xEtBottom + (CorrectionOMidX - sbEtToothed) * Stroke) O [widths.heading Stroke 0 {.y (1) .x (sbEtToothed)}]
			archv
			straight.up.end (xEtRight - (Stroke - ShoulderFine) * HVContrast) smaEt [widths.heading ShoulderFine 0 Upward]

		VBarRight xEtRight (smaEt + O) yEtRightBarTop
		VBarRight xEtRight smaEt 0 [Math.max [AdviceStroke 5] (Stroke - ShoulderFine / 2)]

	define yEtFlatTopEnd : Math.max (SmoothA + fineAmp) (CAP * 0.4)
	define yEtFlatTopBarPos : (OverlayPos * CAP + Stroke * 0.625) / CAP
	define sbFlatTop : shoulderMidSlope fineAmp nothing (1)

	create-glyph 'ampersand.flatTop' : union
		LowerOpenCrossbar yEtFlatTopEnd
		RevEzhShape CAP 0 (hookless -- true) (sma -- SmoothA) (smb -- SmoothB) (pyBar -- yEtFlatTopBarPos) (diagCoeff -- 1.2)
		dispiro
			widths.lhs
			g4.down.start (SB + OX) [RevEzhShape.yLoopLeft CAP 0 yEtFlatTopBarPos smaEt smbEt]
			arcvh
			g4.right.mid (xLowerOpenBottom + CorrectionOMidS) O [widths.heading Stroke 0 {.y (1) .x (sbFlatTop)}]
			archv
			flat (xLowerOpenRight - OX) smaEt [widths.lhs fineAmp]
			curl (xLowerOpenRight - OX) yEtFlatTopEnd [heading Upward]

	select-variant 'ampersand' '&'
